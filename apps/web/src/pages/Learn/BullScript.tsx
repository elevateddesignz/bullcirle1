import React, { useState, useEffect, useMemo } from 'react';
import { Search, Copy, Download, X, Filter, ChevronLeft, ChevronRight } from 'lucide-react';

interface Term {
  term: string;
  definition: string;
  category: string;
}

const categories = [
  'All',
  'Forex',
  'Fundamental Analysis',
  'General',
  'Institutional / Strategy',
  'Options Trading',
  'Technical Analysis',
  'Trading Platforms',
  'Trading Psychology'
];

const glossaryTerms: Term[] = [
  // Forex
  {
    term: "Pip",
    definition: "The smallest price move that a given exchange rate makes based on market convention.",
    category: "Forex"
  },
  {
    term: "Currency Pair",
    definition: "Two different currencies quoted in relation to each other for trading.",
    category: "Forex"
  },
  {
    term: "Spread",
    definition: "The difference between the bid and ask price.",
    category: "Forex"
  },
  {
    term: "Slippage",
    definition: "The difference between expected price and actual execution.",
    category: "Forex"
  },
  // Fundamental Analysis
  {
    term: "Earnings Per Share (EPS)",
    definition: "A company's net income divided by its outstanding shares.",
    category: "Fundamental Analysis"
  },
  {
    term: "Price-to-Earnings Ratio (P/E)",
    definition: "A valuation metric comparing price to earnings.",
    category: "Fundamental Analysis"
  },
  {
    term: "Book Value",
    definition: "The net value of a company's assets on the balance sheet.",
    category: "Fundamental Analysis"
  },
  {
    term: "Market Cap",
    definition: "The total value of a company's shares (price × shares outstanding).",
    category: "Fundamental Analysis"
  },
  {
    term: "EBITDA",
    definition: "Earnings before interest, taxes, depreciation, and amortization.",
    category: "Fundamental Analysis"
  },
  {
    term: "Free Cash Flow",
    definition: "Cash generated by a company after capital expenditures.",
    category: "Fundamental Analysis"
  },
  // General
  {
    term: "Bull Market",
    definition: "A rising market condition where asset prices are trending upward.",
    category: "General"
  },
  {
    term: "Bear Market",
    definition: "A prolonged period of declining asset prices, usually by 20% or more.",
    category: "General"
  },
  {
    term: "Volume",
    definition: "The number of shares or contracts traded in a given period.",
    category: "General"
  },
  {
    term: "Liquidity",
    definition: "The ability to buy/sell quickly without affecting price.",
    category: "General"
  },
  {
    term: "Volatility",
    definition: "The rate at which the price of a security increases or decreases.",
    category: "General"
  },
  // Institutional / Strategy
  {
    term: "Dark Pool",
    definition: "A private exchange used for large, anonymous trades.",
    category: "Institutional / Strategy"
  },
  {
    term: "Block Trade",
    definition: "A large trade executed privately to avoid disrupting the market.",
    category: "Institutional / Strategy"
  },
  {
    term: "Arbitrage",
    definition: "Buying and selling the same asset in different markets to exploit price differences.",
    category: "Institutional / Strategy"
  },
  {
    term: "Market Making",
    definition: "Providing liquidity by continuously quoting buy and sell prices.",
    category: "Institutional / Strategy"
  },
  {
    term: "High-Frequency Trading (HFT)",
    definition: "Trading strategies using powerful computers to transact large numbers of orders at very fast speeds.",
    category: "Institutional / Strategy"
  },
  // Options Trading
  {
    term: "Strike Price",
    definition: "The price at which an option can be exercised.",
    category: "Options Trading"
  },
  {
    term: "Call Option",
    definition: "A contract giving the right to buy an asset at a specific price.",
    category: "Options Trading"
  },
  {
    term: "Put Option",
    definition: "A contract giving the right to sell an asset at a specific price.",
    category: "Options Trading"
  },
  {
    term: "Premium",
    definition: "The price paid to buy an option contract.",
    category: "Options Trading"
  },
  {
    term: "Delta",
    definition: "Measures how much an option's price changes per $1 move in the underlying.",
    category: "Options Trading"
  },
  {
    term: "Theta",
    definition: "Measures time decay — how much value an option loses per day.",
    category: "Options Trading"
  },
  // Technical Analysis
  {
    term: "Support",
    definition: "A price level where a downtrend pauses due to demand.",
    category: "Technical Analysis"
  },
  {
    term: "Resistance",
    definition: "A price level where an uptrend pauses due to selling pressure.",
    category: "Technical Analysis"
  },
  {
    term: "Moving Average",
    definition: "A trend-following indicator that smooths price data.",
    category: "Technical Analysis"
  },
  {
    term: "RSI (Relative Strength Index)",
    definition: "Measures momentum on a scale from 0 to 100.",
    category: "Technical Analysis"
  },
  {
    term: "MACD",
    definition: "A trend-following momentum indicator based on moving averages.",
    category: "Technical Analysis"
  },
  {
    term: "Bollinger Bands",
    definition: "Volatility bands above and below a moving average.",
    category: "Technical Analysis"
  },
  {
    term: "Fibonacci Retracement",
    definition: "Identifies potential reversal levels using Fibonacci ratios.",
    category: "Technical Analysis"
  },
  // Trading Platforms
  {
    term: "MetaTrader",
    definition: "A popular electronic trading platform for forex and other markets.",
    category: "Trading Platforms"
  },
  {
    term: "TradingView",
    definition: "A web-based charting and social trading platform.",
    category: "Trading Platforms"
  },
  {
    term: "ThinkOrSwim",
    definition: "A high-level platform offered by TD Ameritrade.",
    category: "Trading Platforms"
  },
  {
    term: "Interactive Brokers",
    definition: "A broker and trading platform popular with pros and institutions.",
    category: "Trading Platforms"
  },
  // Trading Psychology
  {
    term: "FOMO",
    definition: "Fear Of Missing Out - emotional trading based on not wanting to miss opportunities.",
    category: "Trading Psychology"
  },
  {
    term: "Analysis Paralysis",
    definition: "Over-analyzing situations leading to delayed or no action.",
    category: "Trading Psychology"
  },
  {
    term: "Loss Aversion",
    definition: "The tendency to fear losses more than enjoying gains.",
    category: "Trading Psychology"
  },
  {
    term: "Revenge Trading",
    definition: "Trading aggressively to recover from a loss, often leading to bigger losses.",
    category: "Trading Psychology"
  },
  {
    term: "Discipline",
    definition: "Following your strategy and rules consistently regardless of emotion.",
    category: "Trading Psychology"
  },
  {
    term: "Overconfidence",
    definition: "Inflated belief in skill, usually after a winning streak.",
    category: "Trading Psychology"
  }
];

const ITEMS_PER_PAGE = 10;

function getPageNumbers(totalPages: number, currentPage: number) {
  const pageNumbers = [];
  const maxVisiblePages = 5;
  let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
  let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

  if (endPage - startPage + 1 < maxVisiblePages) {
    startPage = Math.max(1, endPage - maxVisiblePages + 1);
  }

  for (let i = startPage; i <= endPage; i++) {
    pageNumbers.push(i);
  }

  return pageNumbers;
}

export default function BullScript() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [expandedTerm, setExpandedTerm] = useState<string | null>(null);
  const [copiedTerm, setCopiedTerm] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);

  const filteredTerms = useMemo(() => {
    return glossaryTerms.filter(term => {
      const matchesSearch = term.term.toLowerCase().includes(searchQuery.toLowerCase()) ||
                            term.definition.toLowerCase().includes(searchQuery.toLowerCase());
      const matchesCategory = selectedCategory === 'All' || term.category === selectedCategory;
      return matchesSearch && matchesCategory;
    });
  }, [searchQuery, selectedCategory]);

  const totalPages = Math.ceil(filteredTerms.length / ITEMS_PER_PAGE);
  const paginatedTerms = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return filteredTerms.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [filteredTerms, currentPage]);

  useEffect(() => {
    setCurrentPage(1);
  }, [searchQuery, selectedCategory]);

  const handleCopy = (term: string, definition: string) => {
    navigator.clipboard.writeText(`${term}: ${definition}`);
    setCopiedTerm(term);
    setTimeout(() => setCopiedTerm(null), 2000);
  };

  const handleDownloadPDF = () => {
    alert('PDF download functionality would be implemented here');
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white">
      <header className="fixed top-0 left-0 right-0 z-50 bg-gray-100 dark:bg-gray-800/95 backdrop-blur-lg border-b border-brand-primary/20">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <img
              src="https://bullcircle.com/bulllogo.png"
              alt="BullCircle"
              className="w-8 h-8 object-contain"
            />
            <div className="flex flex-col">
              <h1 className="text-xl font-bold">
                The Bull<span className="text-brand-primary">Script</span>
              </h1>
              <span className="text-xs text-gray-500 dark:text-gray-400">Trading Glossary</span>
            </div>
          </div>
          <button
            onClick={handleDownloadPDF}
            className="flex items-center gap-2 px-4 py-2 rounded-lg bg-brand-primary/20 text-brand-primary hover:bg-brand-primary/30 transition-colors"
          >
            <Download size={18} />
            <span className="hidden sm:inline">Download PDF</span>
          </button>
        </div>
      </header>

      <main className="container mx-auto px-4 pt-24 pb-8">
        <div className="space-y-4 mb-8">
          <div className="relative">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search trading terms..."
              className="w-full bg-gray-100 dark:bg-gray-800/50 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 rounded-lg pl-10 pr-4 py-3 focus:outline-none focus:ring-2 focus:ring-brand-primary/50 focus:bg-gray-200 dark:focus:bg-gray-800/70 transition-colors border border-brand-primary/20"
            />
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400" size={20} />
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 dark:text-gray-400 hover:text-white dark:hover:text-white transition-colors"
              >
                <X size={20} />
              </button>
            )}
          </div>

          <div className="flex flex-wrap gap-2">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setSelectedCategory(category)}
                className={`flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm transition-all duration-200 ${
                  selectedCategory === category
                    ? 'bg-brand-primary/20 text-brand-primary'
                    : 'bg-gray-100 dark:bg-gray-800/50 text-gray-500 dark:text-gray-400 hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700/50'
                }`}
              >
                <Filter size={14} />
                {category}
              </button>
            ))}
          </div>
        </div>

        <div className="mb-4 text-gray-500 dark:text-gray-400">
          Showing {paginatedTerms.length} of {filteredTerms.length} terms
          {selectedCategory !== 'All' && ` in ${selectedCategory}`}
        </div>

        <div className="space-y-4">
          {paginatedTerms.map((term) => (
            <div
              key={term.term}
              className="bg-gray-100 dark:bg-gray-800/50 rounded-xl border border-brand-primary/20 overflow-hidden transition-all duration-200 hover:border-brand-primary/40"
            >
              <div
                className="p-4 cursor-pointer"
                onClick={() => setExpandedTerm(expandedTerm === term.term ? null : term.term)}
              >
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-brand-primary">{term.term}</h3>
                    <span className="text-sm text-gray-500 dark:text-gray-400">{term.category}</span>
                  </div>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleCopy(term.term, term.definition);
                    }}
                    className={`p-2 rounded-lg transition-colors ${
                      copiedTerm === term.term
                        ? 'bg-green-500/20 text-green-400'
                        : 'bg-gray-700/50 text-gray-400 hover:text-white hover:bg-gray-700'
                    }`}
                  >
                    <Copy size={16} />
                  </button>
                </div>
                <p className="mt-2 text-gray-300 dark:text-gray-400">{term.definition}</p>
              </div>
            </div>
          ))}

          {filteredTerms.length === 0 && (
            <div className="text-center py-12 text-gray-500 dark:text-gray-400">
              No terms found for "{searchQuery}"
              {selectedCategory !== 'All' && ` in ${selectedCategory}`}
            </div>
          )}
        </div>

        {filteredTerms.length > 0 && (
          <div className="mt-8 flex items-center justify-center gap-2">
            <button
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800/50 text-gray-500 dark:text-gray-400 hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700/50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <ChevronLeft size={20} />
            </button>

            {getPageNumbers(totalPages, currentPage).map(pageNum => (
              <button
                key={pageNum}
                onClick={() => setCurrentPage(pageNum)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  currentPage === pageNum
                    ? 'bg-brand-primary/20 text-brand-primary'
                    : 'bg-gray-100 dark:bg-gray-800/50 text-gray-500 dark:text-gray-400 hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700/50'
                }`}
              >
                {pageNum}
              </button>
            ))}

            <button
              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
              disabled={currentPage === totalPages}
              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800/50 text-gray-500 dark:text-gray-400 hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700/50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <ChevronRight size={20} />
            </button>
          </div>
        )}
      </main>
    </div>
  );
}
