// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  paid
  free
  unverified
}

enum BrokerEnv {
  paper
  live
}

model User {
  id                String             @id
  email             String             @unique
  roles             UserRole[]         @default([free])
  displayName       String?
  avatarUrl         String?
  isEmailVerified   Boolean            @default(false)
  brokerConnections BrokerConnection[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model BrokerConnection {
  id              String     @id @default(uuid())
  userId          String
  provider        String     @default("alpaca")
  env             BrokerEnv
  accessTokenEnc  String
  refreshTokenEnc String
  expiresAt       DateTime
  accountId       String?
  scopes          String[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider, env])
  @@unique([userId, provider, env], name: "user_provider_env_unique")
  @@map("broker_connections")
}

model StatusEntry {
  id          String    @id @default(uuid())
  title       String
  description String
  statusType  String    @default("changelog")
  publishAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CourseModule {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  summary     String
  content     Json
  category    String
  level       String    @default("beginner")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CommunityThread {
  id          String    @id @default(uuid())
  title       String
  body        String
  authorId    String
  tags        String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PricingPlan {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal   @db.Money
  billingCycle String   @default("monthly")
  features    String[]  @default([])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SupportArticle {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  body        String
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LegalDocument {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  body        String
  version     String
  publishedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DeveloperResource {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  description String
  content     Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model RoadmapItem {
  id          String    @id @default(uuid())
  title       String
  description String
  status      String    @default("planned")
  eta         DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
