import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import { PythonShell } from 'python-shell';
import path from 'path';
import fs from 'fs';
import { getAlphaHistory } from './lib/alphaHistory.js';

// Load environment variables
dotenv.config();

// Constants
const app = express();
const PORT = process.env.PORT || 3000;
const SYMBOL_CACHE_PATH = path.resolve('cache/stockSymbols.json');

// Ensure cache directory exists
fs.mkdirSync(path.dirname(SYMBOL_CACHE_PATH), { recursive: true });

// Middleware
app.use(cors({ origin: true, credentials: true }));
app.use(express.json());

// ─── CORS FIX: ensure every response (and OPTIONS) has the headers ─────────────────
app.use((req, res, next) => {
  const origin = process.env.FRONTEND_URL || '*';
  res.header('Access-Control-Allow-Origin', origin);
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header(
    'Access-Control-Allow-Headers',
    'Origin, X-Requested-With, Content-Type, Accept, Authorization'
  );
  res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,OPTIONS');
  if (req.method === 'OPTIONS') return res.sendStatus(204);
  next();
});

// ─── Root ─────────────────────────────────────────────────────────────────────
app.get('/', (req, res) => res.send('BullCircle Backend is running!'));

// ─── Alpaca Account ──────────────────────────────────────────────────────────
const getAlpacaHeaders = (mode = 'paper') => ({
  'APCA-API-KEY-ID': process.env[`ALPACA_${mode.toUpperCase()}_API_KEY`],
  'APCA-API-SECRET-KEY': process.env[`ALPACA_${mode.toUpperCase()}_API_SECRET`],
  'Content-Type': 'application/json',
});

app.get('/api/account', async (req, res) => {
  const mode = req.query.mode === 'live' ? 'live' : 'paper';
  const baseUrl = process.env[`ALPACA_${mode.toUpperCase()}_BASE_URL`];
  try {
    const [accountRes, positionsRes, ordersRes] = await Promise.all([
      fetch(`${baseUrl}/v2/account`, { headers: getAlpacaHeaders(mode) }),
      fetch(`${baseUrl}/v2/positions`, { headers: getAlpacaHeaders(mode) }),
      fetch(`${baseUrl}/v2/orders?status=all&limit=10`, { headers: getAlpacaHeaders(mode) }),
    ]);
    if (!accountRes.ok || !positionsRes.ok || !ordersRes.ok) throw new Error('Alpaca API error');
    const [account, positions, orders] = await Promise.all([
      accountRes.json(), positionsRes.json(), ordersRes.json()
    ]);
    res.json({ account, positions, orders });
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch Alpaca account data' });
  }
});

app.get('/api/account/history', async (req, res) => {
  const mode = req.query.mode === 'live' ? 'live' : 'paper';
  const baseUrl = process.env[`ALPACA_${mode.toUpperCase()}_BASE_URL`];
  try {
    const url = `${baseUrl}/v2/account/portfolio/history?period=1M&timeframe=1D`;
    const response = await fetch(url, { headers: getAlpacaHeaders(mode) });
    if (!response.ok) throw new Error('History fetch error');
    const json = await response.json();
    const history = json.timestamp.map((ts, i) => ({
      date: new Date(ts * 1000).toISOString().split('T')[0],
      value: json.equity[i],
    }));
    res.json({ history });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ─── Alpha Vantage Helpers ───────────────────────────────────────────────────
async function fetchGlobalQuote(symbol, fnName, extra = '') {
  const url = `https://www.alphavantage.co/query?function=${fnName}&symbol=${symbol}${extra}&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`;
  const res = await fetch(url);
  return res.ok ? res.json() : null;
}

app.get('/api/alpha-quotes', async (req, res) => {
  const symbols = (req.query.symbols || '').split(',').map(s => s.trim().toUpperCase());
  if (!symbols.length) return res.status(400).json({ error: 'Missing symbols' });
  try {
    const quotes = {};
    await Promise.all(symbols.map(async sym => {
      const data = await fetchGlobalQuote(sym, 'GLOBAL_QUOTE');
      quotes[sym] = data?.['Global Quote'] || {};
    }));
    res.json({ quotes });
  } catch {
    res.status(500).json({ error: 'Failed fetching quotes' });
  }
});

app.get('/api/alpha-history', async (req, res) => {
  const symbol = (req.query.symbol || '').toString().toUpperCase();
  if (!symbol) return res.status(400).json({ error: 'Missing symbol' });
  try {
    const history = await getAlphaHistory(symbol);
    res.json({ symbol, history });
  } catch {
    res.status(500).json({ error: 'Failed to fetch history' });
  }
});

// ─── Alpha News ─────────────────────────────────────────────────────────────
app.get('/api/alpha-news', async (req, res) => {
  try {
    const newsUrl = `https://www.alphavantage.co/query?function=NEWS_SENTIMENT&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`;
    const response = await fetch(newsUrl);
    if (!response.ok) return res.status(response.status).send(await response.text());
    const data = await response.json();
    const feed = Array.isArray(data.feed) ? data.feed : [];
    const news = feed.map(a => ({
      title: a.title || 'No title',
      summary: a.summary || a.body || '',
      url: a.url,
      datetime: a.time_published,
      source: a.source || a.provider || 'Unknown',
    }));
    res.json({ news });
  } catch (err) {
    console.error('Error fetching Alpha Vantage news:', err);
    res.status(500).json({ error: 'Server error fetching news' });
  }
});

// ─── Alpha Listings (streamed) ─────────────────────────────────────────────
app.get('/api/alpha-listings', async (req, res) => {
  try {
    const url = `https://www.alphavantage.co/query?function=LISTING_STATUS&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`;
    const response = await fetch(url);

    if (!response.ok) {
      // proxy any error
      const text = await response.text();
      return res.status(response.status).send(text);
    }

    // force chunked transfer so we don't set a Content-Length
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader('Transfer-Encoding', 'chunked');
    // pipe the remote stream directly to the client
    response.body.pipe(res);

  } catch (err) {
    console.error('Error fetching alpha listings:', err);
    res.status(500).json({ error: 'Server error fetching listings' });
  }
});


// ─── Stock Screener ─────────────────────────────────────────────────────────
app.get('/api/stock-data', async (req, res) => {
  try {
    const { symbol } = req.query;
    if (!symbol) return res.status(400).json({ error: 'Missing required query parameter: symbol' });
    const url = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${symbol}&interval=1min&apikey=${process.env.ALPHA_VANTAGE_API_KEY}&outputsize=compact`;
    const response = await fetch(url);
    if (!response.ok) return res.status(response.status).send(await response.text());
    const data = await response.json();
    const timeSeries = data["Time Series (1min)"];
    if (!timeSeries) return res.json({ bars: [] });
    let bars = Object.keys(timeSeries).map(timestamp => {
      const bar = timeSeries[timestamp];
      return {
        t: new Date(timestamp).toISOString(),
        o: parseFloat(bar["1. open"]),
        h: parseFloat(bar["2. high"]),
        l: parseFloat(bar["3. low"]),
        c: parseFloat(bar["4. close"]),
      };
    });
    bars.sort((a, b) => new Date(a.t) - new Date(b.t));
    res.json({ bars });
  } catch (err) {
    console.error('❌ Error fetching stock data:', err);
    res.status(500).json({ error: 'Server error fetching stock data' });
  }
});

// ─── In-Memory Journal ────────────────────────────────────────────────────────
const trades = [];
app.post('/api/tradingbot/journal', (req, res) => {
  const trade = { ...req.body, timestamp: new Date().toISOString() };
  trades.push(trade);
  res.json({ status: 'logged', trade });
});
app.get('/api/tradingbot/journal', (req, res) => res.json({ count: trades.length, trades }));

// ─── Core TradingBot analysis ────────────────────────────────────────────────
app.post('/api/tradingbot', async (req, res) => {
  const symbol = String(req.body.symbol || '').toUpperCase();
  if (!symbol) return res.status(400).json({ error: 'symbol required' });
  try {
    // 1️⃣ Get latest price
    const response = await fetch(
      `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${process.env.ALPHA_VANTAGE_API_KEY}`
    );
    const data = await response.json();
    const price = parseFloat(data['Global Quote']?.['05. price'] || '');
    if (!isFinite(price)) throw new Error(`No price for ${symbol}`);
    // 2️⃣ Get history
    const history = await getAlphaHistory(symbol);
    // 3️⃣ GPT analysis
    const { default: OpenAI } = await import('openai');
    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ error: 'OPENAI_API_KEY not set' });
    }
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const prompt = req.body.prompt?.trim()
      ? `Analyze ${symbol} ($${price.toFixed(2)}) with prompt:\n${req.body.prompt}`
      : `
You are TradeGPT, an equities analyst.
Stock: ${symbol}
Current Price: $${price.toFixed(2)}

Respond in YAML:
strategy: <short>
confidence: <0-100>
recommendation: <buy|sell|wait>
analysis: <one paragraph>
`.trim();

    const chat = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role:'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 180
    });

    const raw = chat.choices[0].message.content.trim();
    const pick = key => raw.match(new RegExp(`${key}:\\s*([^\\n]+)`, 'i'))?.[1].trim() || '';

    res.json({
      symbol,
      price,
      strategy: pick('strategy') || 'unknown',
      confidence: parseInt(pick('confidence'), 10) || 0,
      recommendation: pick('recommendation').toLowerCase(),
      analysis: pick('analysis'),
      history,
      raw
    });

  } catch (err) {
    console.error('❌ /api/tradingbot error:', err);
    res.status(500).json({ error: 'Server error – see logs' });
  }
});

// ─── Autopilot endpoint ─────────────────────────────────────────────────────
app.post('/api/tradingbot/autopilot', async (req, res) => {
  const symbol = (req.body.symbol || '').toString().toUpperCase();
  if (!symbol) return res.status(400).json({ error: 'Missing symbol' });
  const mode = req.body.mode === 'live' ? 'live' : 'paper';
  const alpacaBase = process.env[`ALPACA_${mode.toUpperCase()}_BASE_URL`];
  try {
    // 1) Price & volume
    const av = await fetchGlobalQuote(symbol, 'GLOBAL_QUOTE');
    const q = av?.['Global Quote'] || {};
    const price = parseFloat(q['05. price'] || '0');
    const volume = parseInt(q['06. volume'] || '0', 10);
    if (!price || !volume) throw new Error(`Invalid quote for ${symbol}`);

    // 2) History → features
    const history = await getAlphaHistory(symbol);
    const features = history.map(bar => bar.value);

    // 3) Python model
    const script = path.join(process.cwd(), 'ml_model', 'predict_trade.py');
    let pyOut = '';
    const pyshell = new PythonShell(script, { mode: 'text', pythonOptions: ['-u'] });
    pyshell.on('message', msg => { pyOut += msg; });
    pyshell.end(async err => {
      if (err) return res.status(500).json({ error: 'Model error' });
      let result;
      try { result = JSON.parse(pyOut); }
      catch { return res.status(500).json({ error: 'Bad JSON from model' }); }

      // 4) Optional order
      let tradeResult = null;
      if (result.recommendation === 'buy' && result.confidence > 0.8) {
        const order = { symbol, side:'buy', type:'market', time_in_force:'gtc', qty:1 };
        const exec = await fetch(`${alpacaBase}/v2/orders`, {
          method:'POST', headers:getAlpacaHeaders(mode), body:JSON.stringify(order)
        });
        if (!exec.ok) return res.status(502).json({ error:'Order failed' });
        tradeResult = await exec.json();
      }

      // 5) Reply
      res.json({
        symbol,
        price,
        features,
        strategy:      result.strategy,
        confidence:    result.confidence,
        recommendation:result.recommendation,
        analysis:      result.analysis,
        tradeResult
      });
    });

    pyshell.send(JSON.stringify(features));

  } catch (err) {
    console.error('Autopilot error:', err);
    res.status(500).json({ error: err.message });
  }
});

// ─── Start ─────────────────────────────────────────────────────────────────
app.listen(PORT, () => console.log(`🚀 BullCircle backend running on port ${PORT}`));
