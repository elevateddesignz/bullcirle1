{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww15980\viewh13800\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // tradingbot.js  \'96 ES-module friendly (2025-05-01)\
\
/* \uc0\u9472 \u9472  Node-ESM __dirname/__filename shim \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472  */\
import \{ dirname \}     from 'path';\
import \{ fileURLToPath \} from 'url';\
export const __filename = fileURLToPath(import.meta.url);\
export const __dirname  = dirname(__filename);\
/* \uc0\u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472 \u9472  */\
\
import fs            from 'fs';\
import path          from 'path';\
import \{ Router \}    from 'express';\
import \{ PythonShell \} from 'python-shell';\
import \{ getAlphaHistory \} from './lib/alphaHistory.js';\
import OpenAI        from 'openai';\
\
/* -------------------------------------------------------------------- */\
\
const router = Router();\
\
/* Example route \'96 extend as you need\
   GET /api/tradingbot/example?symbol=AAPL\
----------------------------------------------------------------------- */\
router.get('/example', async (req, res) => \{\
  try \{\
    const symbol = (req.query.symbol || '').toUpperCase();\
    if (!symbol) return res.status(400).json(\{ error: 'symbol required' \});\
\
    // read some cached JSON that lives next to this file\
    const cachePath = path.join(__dirname, 'cache', `$\{symbol\}.json`);\
    let cached = \{\};\
    if (fs.existsSync(cachePath)) \{\
      cached = JSON.parse(fs.readFileSync(cachePath, 'utf-8'));\
    \}\
\
    // maybe do something with OpenAI and/or Python:\
    // const openai = new OpenAI(\{ apiKey: process.env.OPENAI_API_KEY \});\
    // \'85\
\
    res.json(\{ ok: true, symbol, cached \});\
  \} catch (err) \{\
    console.error('tradingbot example error:', err);\
    res.status(500).json(\{ error: err.message \});\
  \}\
\});\
\
/* -------------------------------------------------------------------- */\
/* Export the router so index.js can `app.use('/api/tradingbot', router)` */\
export default router;\
}